---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: alloy
  namespace: observability
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: alloy
rules:
  - apiGroups: [""]
    resources: ["nodes", "nodes/proxy", "services", "endpoints", "pods"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: alloy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: alloy
subjects:
  - kind: ServiceAccount
    name: alloy
    namespace: observability
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: alloy
  namespace: observability
spec:
  selector:
    matchLabels:
      app: alloy
  template:
    metadata:
      labels:
        app: alloy
    spec:
      serviceAccountName: alloy
      containers:
      - name: alloy
        image: grafana/alloy:latest
        ports:
        - containerPort: 9080
          name: http-metrics
        volumeMounts:
        - name: pod-logs
          mountPath: /var/log/pods
          readOnly: true
        - name: alloy-config
          mountPath: /etc/alloy
        - name: positions
          mountPath: /tmp
      volumes:
      - name: pod-logs
        hostPath:
          path: /var/log/pods
      - name: alloy-config
        configMap:
          name: alloy-config
      - name: positions
        emptyDir: {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
  namespace: observability
data:
  config.alloy: |
    discovery.kubernetes "k8s_pods" {
      role = "pod"
    }

    discovery.relabel "k8s_pods_relabel" {
      targets = discovery.kubernetes.k8s_pods.targets
      
      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        target_label = "namespace"
      }
      
      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        target_label = "pod"
      }
      
      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        target_label = "container"
      }
      
      rule {
        action        = "replace"
        source_labels = [
          "__meta_kubernetes_namespace",
          "__meta_kubernetes_pod_name",
          "__meta_kubernetes_pod_uid",
          "__meta_kubernetes_pod_container_name",
        ]
        regex         = "(.*);(.*);(.*);(.*)"
        target_label  = "__path__"
        replacement   = "/var/log/pods/${1}_${2}_${3}/${4}/0.log"
      }
    }

    loki.source.file "kubernetes_logs" {
      targets    = discovery.relabel.k8s_pods_relabel.output
      forward_to = [loki.process.parse_k8s_logs.receiver]
    }

    loki.process "parse_k8s_logs" {
      stage.regex {
        expression = "^(?P<log_time>\\S+) (?P<stream>stdout|stderr) \\S+ (?P<log_message>.*)"
      }
    
      stage.timestamp {
        source = "log_time"
        format = "2006-01-02T15:04:05.999999999Z"
      }
    
      stage.json {
        source = "log_message"
        expressions = {
          message = "msg",
          level   = "level",
          time    = "time",
          span_id = "span_id",
          trace_id = "trace_id",
        }
      }

      stage.labels {
        values = {
          stream = "stream",
          level  = "level",
          message = "message",
          span_id = "span_id",
          trace_id = "trace_id",
        }
      }
    
      forward_to = [loki.write.loki.receiver]
    }

    loki.write "loki" {
      endpoint {
        url = "http://loki:3100/loki/api/v1/push"
      }
    }

    logging {
      level = "info"
    }
